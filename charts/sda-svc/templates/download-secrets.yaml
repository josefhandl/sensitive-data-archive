{{- if or (or (eq "all" .Values.global.deploymentType) (eq "external" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
{{- if and .Values.global.download.enabled  (not .Values.global.vaultSecrets) }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "sda.fullname" . }}-download
type: Opaque
stringData:
  config.yaml: |-
    app:
    {{- if .Values.global.tls.enabled }}
      port: 8443
      serverCert: {{ template "tlsPath" . }}/tls.crt
      serverKey: {{ template "tlsPath" . }}/tls.key
    {{- end }}
    archive:
      type: {{ required "Archive storage type is not set" .Values.global.archive.storageType }}
    {{- if eq "s3" .Values.global.archive.storageType }}
      accessKey: {{ required "Accesskey required for archive" .Values.global.archive.s3AccessKey }}
      bucket: {{ required "S3 archive bucket not set" .Values.global.archive.s3Bucket }}
      {{- if and .Values.global.archive.s3CaFile .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      {{ end }}
      chunksize: {{ default 15 .Values.global.archive.s3ChunkSize }}
      {{- if .Values.global.archive.s3Port }}
      port: {{ .Values.global.archive.s3Port }}
      {{- end }}
      readypath: {{ .Values.global.archive.s3ReadyPath }}
      secretKey: {{ required "Secretkey required for archive" .Values.global.archive.s3SecretKey }}
      url: {{ required "S3 archive URL missing" .Values.global.archive.s3Url }}
    {{- else }}
      location: /archive/
    {{- end }}
    {{- if .Values.global.download.serveDecrypted.c4ghKeyFile }}
    c4gh:
      transientKeyPath: {{ template "c4ghPath" . }}/{{ .Values.global.download.serveDecrypted.c4ghKeyFile }}
      transientKeyPassphrase: {{ .Values.global.download.serveDecrypted.passphrade }}
    {{- end }}
    db:
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
    {{- end }}
      host: {{ .Values.global.db.host }}
      database: {{ .Values.global.db.name }}
      password: {{ required "DB pass is required" (include "dbPassDownload" .) }}
      port: {{ .Values.global.db.port }}
      sslmode: {{ ternary .Values.global.db.sslMode "disable" .Values.global.tls.enabled }}
      user: {{ required "DB user is required" (include "dbUserDownload" .) }}
    grpc:
      host: {{ required "A valid grpc host is required" .Values.global.reencrypt.host }}
      port: {{ ternary 50443 50051 .Values.global.tls.enabled }}
      timeout: {{ default 30 .Values.global.reencrypt.timeout }}
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
    {{- end }}
    log:
      format: {{ .Values.global.log.format }}
      level: {{ .Values.global.log.level }}
    oidc:
      configuration:
        url: {{ required "A oidc provider is required" .Values.global.oidc.provider  | trimSuffix "/" }}/.well-known/openid-configuration
      trusted:
        iss: {{ include "trustedIssPath" . }}/{{ default "iss.json" .Values.global.download.trusted.configFile }}
    session:
      domain: {{ .Values.global.ingress.hostName.download }}
      expiration: {{ .Values.global.download.sessionExpiration }}
      secure: {{ ternary true false .Values.global.tls.enabled }}
---
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "sda.fullname" . }}-download-iss
type: Opaque
data:
  iss.json: {{ .Values.global.download.trusted.iss | toJson | b64enc | quote }}
{{- end }}
{{- end }}
