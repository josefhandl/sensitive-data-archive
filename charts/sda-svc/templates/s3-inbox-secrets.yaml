{{- if or (or (eq "all" .Values.global.deploymentType) (eq "external" .Values.global.deploymentType) ) (not .Values.global.deploymentType) }}
{{- if eq "s3" .Values.global.inbox.storageType }}
{{- if not .Values.global.vaultSecrets }}
apiVersion: v1
kind: Secret
metadata:
  name: {{ template "sda.fullname" . }}-inbox
type: Opaque
stringData:
  config.yaml: |-
    broker:
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      {{- if .Values.global.broker.verifyPeer }}
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
      {{- end }}
    {{- end }}
      exchange: {{ default "sda" .Values.global.broker.exchange }}
      host: {{ required "A valid MQ host is required" .Values.global.broker.host }}
      port: {{ default (ternary 5671 5672 .Values.global.tls.enabled) .Values.global.broker.port }}
      prefetchCount: {{ default 1 .Values.global.broker.prefetchCount }}
      password: {{ required "MQ password is required" (include "mqPassInbox" .) }}
      routingKey: {{ default "inbox" .Values.global.broker.inboxRoutingKey }}
    {{- if ne "" ( default "" .Values.global.broker.serverName ) }}
      serverName: {{.Values.global.broker.serverName }}
    {{- end }}
      ssl: {{ .Values.global.tls.enabled }}
      user: {{ required "MQ user is required" (include "mqUserInbox" .) }}
    {{- if .Values.global.tls.enabled }}
      verifyPeer: {{ .Values.global.broker.verifyPeer }}
    {{- end }}
      vhost: {{ include "brokerVhost" . }}
    db:
    {{- if .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      clientCert: {{ template "tlsPath" . }}/tls.crt
      clientKey: {{ template "tlsPath" . }}/tls.key
    {{- end }}
      host: {{ .Values.global.db.host }}
      database: {{ .Values.global.db.name }}
      password: {{ required "MQ password is required" (include "dbPassInbox" .) }}
      port: {{ .Values.global.db.port }}
      sslmode: {{ ternary .Values.global.db.sslMode "disable" .Values.global.tls.enabled }}
      user: {{ required "DB user is required" (include "dbUserInbox" .) }}
    inbox:
      type: {{ required "Inbox storage type is not set" .Values.global.inbox.storageType }}
    {{- if eq "s3" .Values.global.inbox.storageType }}
      accessKey: {{ required "Accesskey required for inbox" .Values.global.inbox.s3AccessKey }}
      bucket: {{ required "S3 inbox bucket not set" .Values.global.inbox.s3Bucket }}
      {{- if and .Values.global.inbox.s3CaFile .Values.global.tls.enabled }}
      caCert: {{ template "tlsPath" . }}/ca.crt
      {{ end }}
      chunksize: {{ default 15 .Values.global.inbox.s3ChunkSize }}
      {{- if .Values.global.inbox.s3Port }}
      port: {{ .Values.global.inbox.s3Port }}
      {{- end }}
      readypath: {{ .Values.global.inbox.s3ReadyPath }}
      secretKey: {{ required "Secretkey required for inbox" .Values.global.inbox.s3SecretKey }}
      url: {{ required "S3 inbox URL missing" .Values.global.inbox.s3Url }}
    {{- else }}
      location: /inbox/
    {{- end }}
    log:
      format: {{ .Values.global.log.format }}
      level: {{ .Values.global.log.level }}
    schema:
      type: {{ default "federated" .Values.global.schemaType }}
    server:
    {{- if .Values.global.tls.enabled }}
      cert: {{ include "tlsPath" . }}/tls.crt
      key: {{ include "tlsPath" . }}/tls.key
    {{- end }}
    {{- if or .Values.global.oidc.jwtPub .Values.global.auth.resignJwt }}
      jwtpubkeypath: {{ include "jwtPath" . }}
      {{- if .Values.global.auth.resignJwt }}
        {{- $_ := required "The signing pub key is required for s3inbox when auth resigns tokens" .Values.global.auth.jwtPub }}
      {{- end }}
    {{- else }}
      jwtpubkeyurl: {{ required "A oidc provider is required" .Values.global.oidc.provider  | trimSuffix "/" }}/{{ required "A oidc jwk path is required" .Values.global.oidc.jwkPath | trimPrefix "/" }}
    {{- end }}
{{- end }}
{{- end }}
{{- end }}
